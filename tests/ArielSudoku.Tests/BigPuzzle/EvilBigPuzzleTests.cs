using static ArielSudoku.Tests.SudokuTestsBase;
namespace ArielSudoku.Tests.BigPuzzle;

public class EvilBigPuzzleTests
{

    [Fact]
    public void SolveEvilBigPuzzle1()
    {
        string puzzle = "0000:=000000000?70050;01:00@90<8900800700004600=60:=080000070002=00030890>?500012;01@:000008007>00001000@0000900000<>?0740000000006@900000>0100002;0600=800<00500070002000000000<0900>?5;4020=0@0020=0@0<0907000>?500400=6000<803<0000002001@:0000=68000?0004020";
        CheckPuzzleSolution(puzzle);
    }

    [Fact]
    public void SolveEvilBigPuzzle2()
    {
        string puzzle = "000?0<00400000005900000@00000000000000001000000<00:040006800000000000007300=0000000090000:000000>0300000000007@0000000000005000100500@0<00006000000@00000000000000000000000?00000000091020000000010000000000000000000000000600003000>00000910000;000000000000000";
        CheckPuzzleSolution(puzzle);
    }



    [Fact]
    public void SolveEvilBigPuzzle3()
    {
        string puzzle = "00009070<00500>00000000863000000000020000000000000000000=00000000000000050300000000:000000900000000000000000008000400009002000:00800;0000000@0?000000000000?;0000070:000000002000;000000000<000000<0700=0000>0000000000000000;0000?00006000000000000000000<05000";
        CheckPuzzleSolution(puzzle);
    }



    [Fact]
    public void SolveEvilBigPuzzle4()
    {
        string puzzle = "500060000000000:0000000000000000<760000000000?0000000:000006000000000000030000000>?080000060000000@070000000000000000000000@00000000000067>0000000000006000;01:0000000?09000002>060000@0100000000000006000@50000000007000000030000000000000000000000000;0900000?";
        CheckPuzzleSolution(puzzle);
    }
}
